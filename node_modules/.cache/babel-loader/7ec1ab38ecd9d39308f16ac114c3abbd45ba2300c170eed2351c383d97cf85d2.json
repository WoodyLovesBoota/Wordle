{"ast":null,"code":"var _jsxFileName = \"/Users/woody/Development/React-Project/wordle-typescript/src/components/Word.tsx\",\n  _s = $RefreshSig$();\nimport { answerState, colorState } from \"../atoms\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Letter from \"./Letter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Word = () => {\n  _s();\n  const answer = useRecoilValue(answerState);\n  const [colors, setColors] = useRecoilState(colorState);\n  const handleSubmit = event => {\n    checkIsAnswer(event);\n  };\n  const checkIsAnswer = event => {\n    event.preventDefault();\n    let checkArr = [];\n    let res = [];\n    let green = 0;\n    for (let i = 0; i < 5; i++) {\n      res.push(event.currentTarget[i].value);\n      if (res[i] === answer[i]) {\n        green++;\n        checkArr[i] = \"G\";\n      } else if (answer.includes(res[i])) {\n        checkArr[i] = \"Y\";\n      } else {\n        checkArr[i] = \"B\";\n      }\n    }\n    setColors(checkArr);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [colors.map(color => /*#__PURE__*/_jsxDEV(Letter, {\n      bgcolor: color === \"G\" ? \"green\" : color === \"Y\" ? \"yellow\" : color === \"B\" ? \"black\" : \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Word, \"m/eZzjEqDew391SCkq4Z0VFaZd4=\", false, function () {\n  return [useRecoilValue, useRecoilState];\n});\n_c = Word;\nexport default Word;\nvar _c;\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"names":["answerState","colorState","useRecoilState","useRecoilValue","Letter","jsxDEV","_jsxDEV","Word","_s","answer","colors","setColors","handleSubmit","event","checkIsAnswer","preventDefault","checkArr","res","green","i","push","currentTarget","value","includes","onSubmit","children","map","color","bgcolor","fileName","_jsxFileName","lineNumber","columnNumber","type","style","display","_c","$RefreshReg$"],"sources":["/Users/woody/Development/React-Project/wordle-typescript/src/components/Word.tsx"],"sourcesContent":["import { answerState, colorState } from \"../atoms\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Letter from \"./Letter\";\n\nconst Word = () => {\n  const answer = useRecoilValue(answerState);\n  const [colors, setColors] = useRecoilState(colorState);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    checkIsAnswer(event);\n  };\n\n  const checkIsAnswer = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    let checkArr = [];\n    let res = [];\n    let green = 0;\n    for (let i = 0; i < 5; i++) {\n      res.push((event.currentTarget[i] as HTMLInputElement).value);\n      if (res[i] === answer[i]) {\n        green++;\n        checkArr[i] = \"G\";\n      } else if (answer.includes(res[i])) {\n        checkArr[i] = \"Y\";\n      } else {\n        checkArr[i] = \"B\";\n      }\n    }\n    setColors(checkArr);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {colors.map((color) => (\n        <Letter\n          bgcolor={\n            color === \"G\" ? \"green\" : color === \"Y\" ? \"yellow\" : color === \"B\" ? \"black\" : \"gray\"\n          }\n        />\n      ))}\n      <button type=\"submit\" style={{ display: \"none\" }} />\n    </form>\n  );\n};\n\nexport default Word;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,UAAU;AAClD,SAASC,cAAc,EAAEC,cAAc,QAAQ,QAAQ;AACvD,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,MAAM,GAAGN,cAAc,CAACH,WAAW,CAAC;EAC1C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGT,cAAc,CAACD,UAAU,CAAC;EAEtD,MAAMW,YAAY,GAAIC,KAAuC,IAAK;IAChEC,aAAa,CAACD,KAAK,CAAC;EACtB,CAAC;EAED,MAAMC,aAAa,GAAID,KAAuC,IAAK;IACjEA,KAAK,CAACE,cAAc,CAAC,CAAC;IACtB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BF,GAAG,CAACG,IAAI,CAAEP,KAAK,CAACQ,aAAa,CAACF,CAAC,CAAC,CAAsBG,KAAK,CAAC;MAC5D,IAAIL,GAAG,CAACE,CAAC,CAAC,KAAKV,MAAM,CAACU,CAAC,CAAC,EAAE;QACxBD,KAAK,EAAE;QACPF,QAAQ,CAACG,CAAC,CAAC,GAAG,GAAG;MACnB,CAAC,MAAM,IAAIV,MAAM,CAACc,QAAQ,CAACN,GAAG,CAACE,CAAC,CAAC,CAAC,EAAE;QAClCH,QAAQ,CAACG,CAAC,CAAC,GAAG,GAAG;MACnB,CAAC,MAAM;QACLH,QAAQ,CAACG,CAAC,CAAC,GAAG,GAAG;MACnB;IACF;IACAR,SAAS,CAACK,QAAQ,CAAC;EACrB,CAAC;EAED,oBACEV,OAAA;IAAMkB,QAAQ,EAAEZ,YAAa;IAAAa,QAAA,GAC1Bf,MAAM,CAACgB,GAAG,CAAEC,KAAK,iBAChBrB,OAAA,CAACF,MAAM;MACLwB,OAAO,EACLD,KAAK,KAAK,GAAG,GAAG,OAAO,GAAGA,KAAK,KAAK,GAAG,GAAG,QAAQ,GAAGA,KAAK,KAAK,GAAG,GAAG,OAAO,GAAG;IAChF;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACF,CAAC,eACF1B,OAAA;MAAQ2B,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEX,CAAC;AAACxB,EAAA,CAvCID,IAAI;EAAA,QACOJ,cAAc,EACDD,cAAc;AAAA;AAAAkC,EAAA,GAFtC7B,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}